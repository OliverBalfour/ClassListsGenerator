{"version":3,"sources":["components/header.js","components/column.js","components/columnlist.js","components/dialogs.js","tools/algorithm.js","tools/parser.js","root.js","serviceWorker.js","index.js"],"names":["Header","props","classes","makeStyles","theme","header","position","top","left","width","height","backgroundColor","palette","primary","main","color","headerLeft","margin","spacing","fontFamily","fontSize","headerRight","right","padding","headerButtonGroup","marginLeft","React","useState","menuOpen","setMenuOpen","anchorRef","useRef","handleClose","event","current","contains","target","Box","className","showOptions","href","style","float","rel","Button","onClick","viewIssues","variant","marginRight","issues","length","state","restart","toggleState","ButtonGroup","ref","save","size","Popper","open","anchorEl","transition","disablePortal","TransitionProps","place","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","MenuItem","import","export","openListManager","Column","paper","marginTop","listName","display","marginBottom","pencil","cursor","relevantCategories","list","map","student_idx","students","categories","cat","i","filter","TableContainer","component","Table","TableHead","TableRow","TableCell","name","TableBody","idx","key","Chip","label","editStudent","ColumnList","body","columnContainer","bottom","overflowX","whiteSpace","columnBox","teachers","index","lists","EditStudentDialog","studentNames","x","JSON","parse","stringify","student","setStudent","errorMessage","setErrorMessage","friends","join","mustBeWith","cannotBeWith","dummies","setDummies","handleDummyChange","evt","value","classIdx","setClassIdx","updateStudent","stud","nameError","Object","entries","split","indexOf","trim","invalidIdx","possibleTeachers","updateStudentClassIdx","dummyMarkup","TextField","onChange","fullWidth","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","Select","native","FormControl","FormLabel","FormGroup","on","FormControlLabel","control","Checkbox","checked","possible_idx","push","splice","DialogActions","ViewIssuesDialog","maxWidth","issue","message","close","generatePermutation","classSize","copy","rand","a","b","asrc","searchClasses","bsrc","dst","src","studs","console","error","f","min","max","Math","floor","random","obj","relu","cost","determineIssues","severity","reduce","j","numFriends","catMat","_","studentIdx","diff","generateRandomList","numClasses","listIndices","shuffle","lastIndex","k","ceil","slice","App","teacherNames","editingStudent","viMod","numUselessIterations","fetch","then","response","status","text","data","parsed","rawDataString","lines","safeSplitComma","string","inString","items","currentItem","c","parseInt","minStudents","maxStudents","l","substring","row","log","n","toLowerCase","parseCSVSpreadsheet","setState","catch","newState","this","startWorking","stopWorking","worker","intev","setInterval","bind","schedule","permutationSteps","round","pAcceptWorse","perm","iterate","clearInterval","root","fallback","newClassIdx","Component","withStyles","justifyContent","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa1818ba.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Box, ButtonGroup, Popper, Grow, MenuItem, MenuList,\n         Paper, ClickAwayListener, makeStyles } from '@material-ui/core';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n\nexport default function Header (props) {\n  const classes = makeStyles(theme => ({\n    header: {\n      position: 'absolute',\n      top: 0, left: 0,\n      width: '100%', height: '50px',\n      backgroundColor: theme.palette.primary.main,\n      color: 'white'\n    },\n    headerLeft: {\n      position: 'absolute',\n      top: 0, left: 0,\n      margin: theme.spacing(1),\n      fontFamily: 'sans-serif',\n      fontSize: '26px'\n    },\n    headerRight: {\n      position: 'absolute',\n      top: 0, right: 0,\n      padding: 6\n    },\n    headerButtonGroup: {\n      marginLeft: theme.spacing(1)\n    }\n  }))();\n\n  const [menuOpen, setMenuOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const handleClose = event => {\n    if (!anchorRef.current || !anchorRef.current.contains(event.target))\n      setMenuOpen(!menuOpen);\n  }\n\n  return (\n<Box className={classes.header}>\n  <Box className={classes.headerLeft}>\n    Class Lists Generator App\n  </Box>\n  {!props.showOptions && (\n    <a href='https://oliverbalfour.github.io/ClassListsGenerator/docs/instructions.html'\n      style={{color:\"white\", fontSize:\"20px\", float: \"right\", fontFamily: \"sans-serif\", margin: \"14px\"}}\n      target=\"_blank\" rel=\"noopener noreferrer\"\n    >Instructions</a>\n  )}\n  { props.showOptions &&\n  <Box className={classes.headerRight}>\n    <Button\n      onClick={props.viewIssues}\n      color='default' variant='contained' style={{marginRight: \"10px\"}}\n    >\n      View issues ({props.issues.length})\n    </Button>\n    {props.state !== 'editing' &&\n      <Button\n        onClick={props.restart}\n        color='default' variant='contained' style={{marginRight: \"10px\"}}\n      >\n        Start over\n      </Button>\n    }\n    {props.state !== 'editing' &&\n      <Button\n        onClick={() => props.toggleState('working')}\n        color='default' variant='contained'\n      >\n        {props.state === 'working' ? 'Pause' : 'Play'}\n      </Button>\n    }\n    <ButtonGroup\n      variant='contained' color='default'\n      className={classes.headerButtonGroup}\n      ref={anchorRef}\n    >\n      <Button onClick={() => props.toggleState('editing')}>\n        {props.state === 'editing' ? 'Done Editing' : 'Edit'}\n      </Button>\n      {props.state !== 'editing' &&\n        <Button onClick={props.save}>Save</Button>\n      }\n      {props.state !== 'editing' &&\n        <Button size=\"small\" onClick={() => setMenuOpen(!menuOpen)}>\n          <MoreHorizIcon />\n        </Button>\n      }\n    </ButtonGroup>\n    <Popper open={menuOpen} anchorEl={anchorRef.current}\n      transition disablePortal>\n      {({ TransitionProps, place }) => (\n        <Grow {...TransitionProps} style={{\n          transformOrigin: place === 'bottom' ? 'center top' : 'center bottom'\n        }}>\n          <Paper>\n            <ClickAwayListener onClickAway={handleClose}>\n              <MenuList id=\"split-button-menu\">\n                <MenuItem onClick={()=>{setMenuOpen(false); props.import()}}>\n                  Import Spreadsheet (CSV)\n                </MenuItem>\n                <MenuItem onClick={()=>{setMenuOpen(false); props.export()}}>\n                  Export Spreadsheet (CSV)\n                </MenuItem>\n                <MenuItem onClick={()=>{\n                  setMenuOpen(false); props.openListManager()\n                }}>\n                  See Saved Class Lists\n                </MenuItem>\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Grow>\n      )}\n    </Popper>\n  </Box>\n  }\n</Box>\n  );\n}\n","import React from 'react';\nimport {\n  Paper, makeStyles,\n  Table, TableBody, TableCell, TableHead, TableContainer, TableRow,\n  Chip\n} from '@material-ui/core';\nimport CreateIcon from '@material-ui/icons/Create';\n\nexport default function Column (props) {\n  const classes = makeStyles(theme => ({\n    paper: {\n      padding: theme.spacing(2),\n      marginTop: '58px', marginRight: theme.spacing(1),\n      fontFamily: 'sans-serif',\n      width: '320px'\n    },\n    listName: {\n      fontSize: '20px',\n      display: 'block',\n      marginBottom: '10px'\n    },\n    className: {\n      margin: 0,\n      fontFamily: 'sans-serif',\n      fontSize: '20px'\n    },\n    pencil: {\n      float: 'right',\n      cursor: 'pointer'\n    }\n  }))();\n\n  // Jagged array of category indices for each student\n  const relevantCategories = props.list.map(student_idx =>\n    props.students[student_idx].categories.map(\n      // category is enabled, and not the first dummy category\n      (cat, i) => cat && i !== 0 ? i : -1\n      // filter out disabled categories\n    ).filter(cat => cat >= 0)\n  );\n\n  return (\n<TableContainer component={Paper} className={classes.paper}>\n  <Table size='small'>\n    <TableHead>\n      <TableRow><TableCell>\n        <h1 className={classes.className}>{props.name}</h1>\n      </TableCell></TableRow>\n    </TableHead>\n    <TableBody>\n      {props.list.map(idx => props.students[idx].name).map((name, idx) => (\n        <TableRow key={idx}>\n          <TableCell>\n            {name} &nbsp;&nbsp;\n            {relevantCategories[idx].map(cat => (\n              <span key={cat}>\n                <Chip label={props.categories[cat]} size='small' />&nbsp;\n              </span>\n            ))}\n            {props.state !== 'editing' ? null : (\n              <CreateIcon className={classes.pencil}\n                onClick={() => props.editStudent(props.list[idx])} />\n            )}\n          </TableCell>\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n</TableContainer>\n  );\n}\n","import React from 'react';\nimport { Box, makeStyles } from '@material-ui/core';\nimport Column from './column.js'\n\nexport default function ColumnList (props) {\n  /**\n   * props.teachers :: [name :: String]\n   * props.students :: [{\n     name :: String, categories :: [Bool], friends :: [student index]\n     mustBeWith :: [student index], cannotBeWith :: [student index],\n     possibleTeachers :: [index into teachers]\n   }]\n   * props.categories :: [String]\n   * props.lists :: [[index into students]] where subarrays are teacher indexed\n   */\n  const classes = makeStyles(theme => ({\n    body: {\n      position: 'absolute',\n      top: 0, left: 0,\n      width: '100%', height: '100%',\n      backgroundColor: '#EEE',\n      margin: 0,\n      display: 'flex'\n    },\n    columnContainer: {\n      position: 'relative',\n      width: '100%',\n      top: 0, bottom: 0,\n      padding: theme.spacing(2),\n      overflowX: 'scroll',\n      whiteSpace: 'nowrap'\n    },\n    columnBox: {\n      position: 'relative',\n      width: '360px',\n      display: 'inline-block',\n      margin: theme.spacing(1),\n      marginTop: 0\n    }\n  }))();\n\n  return (\n<Box className={classes.body}>\n  <Box className={classes.columnContainer}>\n    {props.teachers.map((name, index) => (\n      <Box className={classes.columnBox} key={index}>\n        <Column name={name} list={props.lists[index]}\n          students={props.students} categories={props.categories}\n          state={props.state} editStudent={props.editStudent} />\n      </Box>\n    ))}\n  </Box>\n</Box>\n  );\n}\n","import React from 'react';\nimport {\n  TextField, Dialog, DialogActions, DialogContent, DialogContentText,\n  DialogTitle, Button, FormLabel, FormControl, FormGroup, FormControlLabel,\n  Checkbox, Table, TableBody, TableRow, TableCell, Select\n} from '@material-ui/core';\n\nexport function EditStudentDialog (props) {\n  const studentNames = props.students.map(x=>x.name);\n  /**\n   * props.student_idx :: Int\n   * props.updateStudent :: Student -> void\n   * props.teachers :: [name :: String]\n   * props.students :: [{\n       name :: String, categories :: [Bool], friends :: [student index]\n       mustBeWith :: [student index], cannotBeWith :: [student index],\n       possibleTeachers :: [index into teachers]\n     }]\n   * props.categories :: [String]\n   */\n\n  var [student, setStudent] = React.useState(\n    JSON.parse(JSON.stringify(props.students[props.student_idx]))\n  );\n  var [errorMessage, setErrorMessage] = React.useState(\"\");\n\n  // Note: trims whitespace too\n  const handleChange = key => evt => setStudent({\n    ...student, [key]: evt.target.value.trim()\n  });\n\n  // Use dummy representations of lists of names as checkboxes are a poor choice\n  // for this use case and a dynamic list is a lot of work\n  // TODO: use <Select multiple /> instead https://material-ui.com/components/selects/#multiple-select\n\n  // handle change to 'name 1, name 2, ...' represented as list of\n  // indices into props.students\n  var [dummies, setDummies] = React.useState({\n    friends: student.friends.map(i => studentNames[i]).join(', '),\n    mustBeWith: student.mustBeWith.map(i => studentNames[i]).join(', '),\n    cannotBeWith: student.cannotBeWith.map(i => props.students[i].name).join(', ')\n  });\n  const handleDummyChange = key => evt => setDummies({\n    ...dummies, [key]: evt.target.value\n  });\n  let [classIdx, setClassIdx] = React.useState(props.classIdx);\n  const updateStudent = student => {\n    // Rebase dummy values onto student by parsing CSV strings\n    var stud = {};\n    var nameError = false;\n    for (const [key, value] of Object.entries(dummies)) {\n      if (value === \"\") stud[key] = [];\n      else stud[key] = value.split(\",\").map(x=>studentNames.indexOf(x.trim()));\n      var invalidIdx = stud[key].indexOf(-1);\n      if (invalidIdx !== -1) nameError = value.split(\",\")[invalidIdx];\n    }\n    \n    // Validation\n    if (student.possibleTeachers.length === 0) {\n      setErrorMessage(\"Cannot have zero possible teachers.\");\n    } else if (nameError !== false) {\n      setErrorMessage(\"Invalid name: '\"+nameError+\"'. Make sure spelling is exact and there is one comma between each name.\");\n    } else {\n      for (const [key, value] of Object.entries(stud)) {\n        student[key] = value;\n      }\n      setStudent(student);\n      if (classIdx !== props.classIdx && student !== props.students[props.student_idx])\n        props.updateStudentClassIdx(classIdx);\n      props.updateStudent(student);\n    }\n  }\n  var dummyMarkup = (<>\n  <TextField\n    label=\"Must be with (comma separated names)\"\n    variant=\"filled\"\n    value={dummies.mustBeWith}\n    onChange={handleDummyChange(\"mustBeWith\")}\n    fullWidth\n  />\n  <TextField\n    label=\"Cannot be with (comma separated names)\"\n    variant=\"filled\"\n    value={dummies.cannotBeWith}\n    onChange={handleDummyChange(\"cannotBeWith\")}\n    fullWidth\n  />\n  <TextField\n    label=\"Friends (comma separated names)\"\n    variant=\"filled\"\n    value={dummies.friends}\n    onChange={handleDummyChange(\"friends\")}\n    fullWidth\n  /></>);\n\n  return (\n <Dialog open={true} onClose={()=>{}} aria-labelledby=\"form-dialog-title\">\n  <DialogTitle id=\"form-dialog-title\">Editing {student.name}</DialogTitle>\n  <DialogContent>\n    <DialogContentText>\n      To force a class change after lists are generated, you must edit a\n      student's parameters.&nbsp;\n      {errorMessage.length === 0 ? null : (\n        <span style={{color:'red'}}>Error: {errorMessage}</span>\n      )}\n    </DialogContentText>\n    <TextField\n      label=\"Name\"\n      variant=\"filled\"\n      value={student.name}\n      onChange={handleChange(\"name\")}\n      fullWidth\n    />\n    <Select\n      native\n      value={props.teachers[classIdx]}\n      onChange={evt => setClassIdx(props.teachers.indexOf(evt.target.value))}\n      fullWidth\n    >\n      {props.teachers.map((name, idx) =>\n        <option value={name} key={idx}>{name}</option>\n      )}\n    </Select>\n    <FormControl component=\"fieldset\" style={{marginTop:\"20px\"}}>\n      <FormLabel component=\"legend\">Categories</FormLabel>\n      <FormGroup>\n        {student.categories.map((on, idx) => (\n          <FormControlLabel\n            control={\n              <Checkbox checked={on} onChange={() => {\n                student.categories[idx] = !student.categories[idx];\n                setStudent({...student});\n              }} />\n            }\n            label={props.categories[idx]} key={idx}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n    <FormControl component=\"fieldset\" style={{marginTop:\"20px\"}}>\n      <FormLabel component=\"legend\">Possible teachers</FormLabel>\n      <FormGroup>\n        {props.teachers.map((name, idx) => (\n          <FormControlLabel\n            control={\n              <Checkbox checked={student.possibleTeachers.indexOf(idx) !== -1}\n                onChange={() => {\n                  const possible_idx = student.possibleTeachers.indexOf(idx);\n                  if (possible_idx === -1) student.possibleTeachers.push(idx);\n                  else student.possibleTeachers.splice(possible_idx, 1);\n                  setStudent({...student});\n                }}\n              />\n            }\n            label={name} key={idx}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n    {dummyMarkup}\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"primary\" onClick={\n      () => updateStudent(props.students[props.student_idx])\n    }>\n      Cancel\n    </Button>\n    <Button onClick={() => updateStudent(student)}\n      color=\"primary\">\n      Update\n    </Button>\n  </DialogActions>\n</Dialog>\n  );\n}\n\nexport function ViewIssuesDialog (props) {\n  return (\n <Dialog open={true} onClose={()=>{}} aria-labelledby=\"form-dialog-title\"\n    fullWidth={true} maxWidth=\"md\">\n  <DialogTitle id=\"form-dialog-title\">Issues with current class list</DialogTitle>\n  <DialogContent>\n    <Table size='small'>\n      <TableBody>\n        {props.issues.map((issue, idx) => (\n          <TableRow key={idx}>\n            <TableCell>\n              {issue.message}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"primary\" onClick={props.close}>\n      Close\n    </Button>\n  </DialogActions>\n</Dialog>\n  );\n}\n","\n// Lists is a jagged array of student indices\n// Class size is [min, max]\n// Students is an array of student objects such that:\n//  friends::[Int] - at least one should be in same class\n//  categories::[Bool] - each boolean category should be roughly evenly distributed\n//  mustBeWith::[Int], cannotBeWith::[Int]\n//  possibleTeachers::[Int]\nexport function iterate (lists, students, classSize, categories, teachers) {\n  // Use a weird mix of hill climbing and simulated annealing optimisation algorithms\n  // Initially we choose the first five moves that reduce cost of up to 100 moves\n  // By the end we string multiple moves together (up to 10 consecutively)\n  // And they can increase cost with a low probability\n  let maxChanges = 5,\n      maxAttemptedChanges = 100,\n      maxPermutationSteps = 5,\n      maxPAcceptWorse = 0.05;\n  for (let i = 0, c = 0; i < maxAttemptedChanges && c < maxChanges; i++) {\n    // if we are 'behind schedule' (not on track to reach c == maxChanges)\n    // then we increase the number of permutation steps\n    // and increase P(accept worse solution)\n    let schedule = relu(i / maxAttemptedChanges - c / maxChanges),\n        permutationSteps = Math.round(1 + schedule * (maxPermutationSteps - 1)),\n        pAcceptWorse = schedule * maxPAcceptWorse;\n    // Generate a new permutation\n    let perm = copy(lists);\n    for (let j = 0; j < permutationSteps; j++)\n      perm = generatePermutation(perm, students, classSize);\n    // Update the lists\n    if (\n      Math.random() < pAcceptWorse\n      || cost(perm,  students, classSize, categories, teachers)\n       < cost(lists, students, classSize, categories, teachers)\n    ) {\n      c++;\n      lists = perm;\n    }\n  }\n  const issues = determineIssues(lists, students, classSize, categories, teachers);\n  return { lists, issues };\n}\n\nfunction generatePermutation(lists, students, classSize) {\n  lists = copy(lists);\n  // Most perms swap students, it's cleaner and there are more possible moves\n  if (rand(0,2) < 1) {\n    // swap two students (class size remains the same)\n    let a = rand(0, students.length),\n        b = rand(0, students.length - 1);\n    if (b === a) b = students.length - 1;\n    let asrc = searchClasses(lists, a),\n        bsrc = searchClasses(lists, b);\n    lists[asrc][lists[asrc].indexOf(a)] = b;\n    lists[bsrc][lists[bsrc].indexOf(b)] = a;\n  } else {\n    // move one student to another class\n    let a = rand(0, students.length),\n        dst = rand(0, lists.length - 1),\n        src = searchClasses(lists, a);\n    if (dst === src) dst = lists.length - 1;\n    lists[src].splice(lists[src].indexOf(a), 1);\n    lists[dst].push(a);\n  }\n\n  // Test that no student is duplicated\n  var studs = {};\n  for (let list of lists)\n    for (let student of list)\n      if (studs[student]) console.error(\"Duplicated student\");\n      else studs[student] = true;\n  \n  return lists;\n}\n\n// random integer in interval [min, max)\nconst rand = (min, max) => Math.floor(Math.random() * (max - min) + min);\n// Deep copy primitive object/array\nconst copy = obj => JSON.parse(JSON.stringify(obj));\nconst relu = x => Math.min(0,x);\n\n// Sum severities of the issues list\nfunction cost (lists, students, classSize, categories, teachers) {\n  return determineIssues(lists, students, classSize, categories, teachers)\n    .map(x => x.severity)\n    .reduce((a,b)=>a+b,0);\n}\n\n// Search a class list for student index x (-1 if not found)\nconst searchClasses = (lists, x) =>\n  lists.map(list => list.indexOf(x) !== -1).indexOf(true);\n\n// determineIssues :: [[Int]], [Student] -> [{severity::Int, message::String}]\n// Creates a list of issues with a list state for 1) display in a modal\n// and 2) optimisation in `iterate`: minimises \\sum_{k\\in issues} k_{severity}\nexport function determineIssues (lists, students, classSize, categories, teachers) {\n  var issues = [];\n  for (let j = 0; j < lists.length; j++) {\n    const list = lists[j];\n    for (let i = 0; i < list.length; i++) {\n      const student = students[list[i]];\n      // Must/cannot be with\n      for (const idx of student.mustBeWith) {\n        if (list.indexOf(idx) === -1)\n          issues.push({severity: 3, message: `${student.name} must be with ${students[idx].name}.`});\n      }\n      for (const idx of student.cannotBeWith) {\n        if (list.indexOf(idx) !== -1)\n          issues.push({severity: 5, message: `${student.name} cannot be with ${students[idx].name}.`});\n      }\n      // Friends\n      let numFriends = 0;\n      for (const idx of student.friends) {\n        if (list.indexOf(idx) !== -1) numFriends ++;\n      }\n      if (numFriends < 1)\n        issues.push({severity: 3, message: `${student.name} is not with any friends.`});\n      // Possible teachers\n      if (student.possibleTeachers.indexOf(j) === -1)\n        issues.push({severity: 5, message: `${student.name} must not be in ${teachers[j]}'s class.`});\n    }\n    // Class size\n    if (list.length < classSize[0]) {\n      const severity = classSize[0] - list.length;\n      issues.push({\n        severity: 8 * severity,\n        message: `${teachers[j]}'s class has ${severity} too few students.`\n      });\n    } else if (list.length > classSize[1]) {\n      const severity = list.length - classSize[1];\n      issues.push({\n        severity: 10 * severity,\n        message: `${teachers[j]}'s class has ${severity} too many students.`\n      });\n    }\n  }\n  // Categories\n  // catMat[categoryIdx][classIdx] is num people with that cat in that class\n  const catMat = categories.map((_, i) => lists.map(\n    // count number of students in list with category i enabled\n    list => list.map(studentIdx => students[studentIdx].categories[i]).reduce((a,b)=>a+b,0)\n  ));\n  for (let i = 0; i < categories.length; i++) {\n    const diff = Math.max(...catMat[i]) - Math.min(...catMat[i]);\n    if ((diff > 1 && i !== 0) || (diff > 3 && i === 0)) { // gender imbalance is less important\n      issues.push({\n        severity: diff,\n        message: `Imbalanced ${categories[i]} category: ${catMat[i]} students per class respectively.`\n      });\n    }\n  }\n\n  return issues;\n}\n","\nexport function parseCSVSpreadsheet (rawDataString) {\n  var lines = rawDataString.split(/[\\r\\n]+/); // split by all 3 line endings\n  while (lines.indexOf(\"\") !== -1) lines.splice(lines.indexOf(\"\"), 1);\n\n  const safeSplitComma = string => {\n    // we can have commas in strings delimited by \"these quotes\"\n    // this works around that\n    var inString = false;\n    var items = [];\n    var currentItem = '';\n    for (let c of string) {\n      if (c === '\"') {\n        inString = !inString;\n        continue;\n      }\n      if (inString || c !== ',') {\n        currentItem += c;\n      } else {\n        items.push(currentItem.trim());\n        currentItem = '';\n      }\n    }\n    items.push(currentItem.trim());\n    return items;\n  }\n\n  var numClasses = parseInt(lines[1].split(\",\")[5]);\n  var minStudents = parseInt(lines[1].split(\",\")[1]);\n  var maxStudents = parseInt(lines[1].split(\",\")[2]);\n\n  var teacherNames = safeSplitComma(lines[1]).slice(8).filter(x=>x.length>0);\n  var categories = [\"Female\", ...safeSplitComma(lines[5]).slice(10)];\n\n  var students = [];\n  var studentNames = lines.slice(6).map(l => l.substring(0, l.indexOf(',')));\n  for (let i = 6; i < lines.length; i++) {\n    var row = safeSplitComma(lines[i]);\n    if (row.length < 10) console.log(\"Is there a / at the end of the URL?\");\n    students.push({\n      name: row[0],\n      categories: [row[1] === \"F\",\n        ...row.slice(10).map(x => x.length > 0)], // list of bools\n      friends: row.slice(2,7).map(name=>studentNames.indexOf(name))\n                .filter(x=>x>=0),\n      mustBeWith: row[8].length === 0 ? []\n        : safeSplitComma(row[8]).map(name=>studentNames.indexOf(name))\n          .filter(x=>x>=0),\n      cannotBeWith: row[7].length === 0 ? []\n        : safeSplitComma(row[7]).map(n=>studentNames.indexOf(n))\n          .filter(x=>x>=0),\n      // indices of teacher names within teacherNames\n      // if ALL, add all indices [0,1,...,numClasses]\n      possibleTeachers: (row[9].toLowerCase() === \"all\"\n                      || row[9].toLowerCase() === \"any\" || row[9] === \"\")\n        ? teacherNames.map((_,i) => i)\n        : safeSplitComma(row[9]).map(name => teacherNames.indexOf(name))\n          .filter(x=>x>=0)\n    });\n  }\n\n  return {\n    numClasses, // teacherNames.length\n    classSize: [minStudents, maxStudents],\n    teacherNames,\n    categories,\n    students,\n    studentNames\n  }\n}\n\nexport function generateRandomList (studentNames, numClasses) {\n  const shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n  var listIndices = shuffle(studentNames.map((_,i)=>i));\n  var lists = [];\n  var lastIndex = 0;\n  let k = Math.ceil(studentNames.length/numClasses);\n  for (let i = 0; i < numClasses; i++) {\n    lists.push(listIndices.slice(lastIndex, lastIndex + k));\n    lastIndex += k;\n  }\n  return lists;\n}\n","import React from 'react';\nimport { Box, Button, withStyles } from '@material-ui/core';\nimport Header from './components/header.js';\nimport ColumnList from './components/columnlist.js';\nimport { EditStudentDialog, ViewIssuesDialog } from './components/dialogs.js';\nimport { iterate, determineIssues } from './tools/algorithm.js';\nimport { parseCSVSpreadsheet, generateRandomList } from './tools/parser.js';\n\nconst styles = theme => ({\n  root: {\n    position: 'absolute',\n    top: 0, left: 0,\n    width: '100%', height: '100%',\n    backgroundColor: \"#EEE\",\n  },\n  fallback: {\n    position: 'absolute',\n    top: 0, left: 0,\n    width: '100%', height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontFamily: 'sans-serif',\n    fontSize: '30px'\n  }\n});\n\nclass App extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      teacherNames: [],\n      lists: [],\n      /* either view, working or editing */\n      state: 'view',\n      // if positive, modal is open with that index student's config\n      editingStudent: -1,\n      issues: [],\n      viMod: false, // view issues modal open\n    };\n    // after 5 iterations which change nothing, pause\n    this.numUselessIterations = 0;\n  }\n  import () {\n    // Insert dummy values for now\n    fetch('./dummy.csv')\n      .then(response => {\n        if (response.status !== 200) return console.error(response.status);\n        response.text().then(data => {\n          // This adds numClasses, classSize, teacherNames, categories,\n          //   students, studentNames and lists to the state\n          const parsed = parseCSVSpreadsheet(data);\n          const lists = generateRandomList(\n            parsed.studentNames, parsed.numClasses\n          );\n          const issues = determineIssues(lists, parsed.students, parsed.classSize, parsed.categories, parsed.teacherNames);\n          this.setState({ ...parsed, lists, issues });\n        })\n      }).catch(console.log);\n  }\n  toggleState (newState) {\n    if (newState === \"working\" && this.state.state !== \"working\")\n      this.startWorking();\n    else this.stopWorking();\n\n    if (this.state.state !== newState)\n      this.setState({ state: newState });\n    else\n      this.setState({ state: 'import' });\n  }\n  startWorking () {\n    this.worker();\n    this.intev = setInterval(this.worker.bind(this), 500);\n  }\n  worker () {\n    const { lists, issues } = iterate(\n      this.state.lists, this.state.students, this.state.classSize,\n      this.state.categories, this.state.teacherNames\n    );\n    // This assumes all issues are equal; it's a decent approximation\n    if (this.state.issues.length === issues.length)\n      this.numUselessIterations++;\n    else\n      this.numUselessIterations = 0;\n    if (this.numUselessIterations >= 5 || issues.length === 0) {\n      this.toggleState(\"working\");\n      this.numUselessIterations = 0;\n    }\n    this.setState({ lists, issues });\n  }\n  stopWorking () {\n    clearInterval(this.intev);\n  }\n  editStudent (student_idx) {\n    // open modal to edit student information\n    this.setState({editingStudent: student_idx});\n  }\n  render () {\n    const { classes } = this.props;\n    const classIdx = this.state.lists.map(list => list.indexOf(this.state.editingStudent) !== -1).indexOf(true);\n    return (\n      <Box className={classes.root}>\n        {this.state.teacherNames.length ? (\n          <ColumnList\n            teachers={this.state.teacherNames}\n            students={this.state.students}\n            categories={this.state.categories}\n            lists={this.state.lists}\n            state={this.state.state}\n            editStudent={this.editStudent.bind(this)}\n          />\n        ) : (\n          <Box className={classes.fallback}>\n            Please &nbsp;\n            <Button onClick={this.import.bind(this)}\n              size='large' color='primary' variant='contained'>\n              import\n            </Button>\n            &nbsp; a spreadsheet\n          </Box>\n        )}\n        <Header\n          import={this.import.bind(this)}\n          export={() => {}}\n          openListManager={() => {}}\n          toggleState={this.toggleState.bind(this)}\n          save={() => {}}\n          restart={() => this.setState({ lists: generateRandomList(\n            this.state.studentNames, this.state.numClasses\n          )})}\n          state={this.state.state}\n          showOptions={this.state.teacherNames.length > 0}\n          issues={this.state.issues}\n          viewIssues={() => this.setState({ viMod: !this.state.viMod })}\n        />\n        {this.state.editingStudent < 0 ? null : (\n          <EditStudentDialog student_idx={this.state.editingStudent}\n            teachers={this.state.teacherNames}\n            students={this.state.students}\n            categories={this.state.categories}\n            updateStudent={student => {\n              const students = this.state.students;\n              students[this.state.editingStudent] = student;\n              this.setState({ students, editingStudent: -1,\n                issues: determineIssues(this.state.lists, students, this.state.classSize, this.state.categories, this.state.teacherNames) });\n            }}\n            classIdx={classIdx}\n            updateStudentClassIdx={newClassIdx => {\n              this.state.lists[classIdx].splice(this.state.lists[classIdx].indexOf(this.state.editingStudent), 1);\n              this.state.lists[newClassIdx].push(this.state.editingStudent);\n              this.setState({ lists: this.state.lists });\n            }}\n          />\n        )}\n        {!this.state.viMod ? null : (\n          <ViewIssuesDialog issues={this.state.issues}\n            close={() => this.setState({ viMod: !this.state.viMod })} />\n        )}\n      </Box>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// Progressive web app stuff (read https://bit.ly/CRA-PWA)\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />\n  // </React.StrictMode>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}