{"version":3,"sources":["components/header.js","components/column.js","components/columnlist.js","tools/algorithm.js","tools/parser.js","components/dialogs.js","root.js","serviceWorker.js","index.js","worker.js"],"names":["Header","props","classes","makeStyles","theme","header","position","top","left","width","height","backgroundColor","palette","primary","main","color","headerLeft","margin","spacing","fontFamily","fontSize","headerRight","right","padding","headerButtonGroup","marginLeft","React","useState","menuOpen","setMenuOpen","anchorRef","useRef","handleClose","event","current","contains","target","Box","className","showOptions","href","style","float","rel","Button","onClick","viewIssues","variant","marginRight","issues","length","state","restart","toggleState","ButtonGroup","ref","undo","save","size","Popper","open","anchorEl","transition","disablePortal","TransitionProps","place","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","MenuItem","component","type","display","onChange","e","importCSV","exportCSV","openListManager","reset","Column","paper","marginTop","listName","marginBottom","pencil","cursor","relevantCategories","list","map","student_idx","students","categories","cat","i","filter","TableContainer","Table","TableHead","TableRow","TableCell","name","TableBody","idx","key","Chip","label","editStudent","ColumnList","body","columnContainer","bottom","overflowX","whiteSpace","columnBox","teachers","index","lists","determineIssues","classSize","teacherNames","j","student","mustBeWith","indexOf","push","severity","message","cannotBeWith","numFriends","friends","possibleTeachers","catMat","_","studentIdx","reduce","a","b","diff","Math","max","min","generateRandomList","studentNames","numClasses","listIndices","floor","random","shuffle","lastIndex","k","ceil","slice","safeSplitComma","string","inString","items","currentItem","c","trim","parseRequirements","lines","parseInt","split","minStudents","maxStudents","x","row","classID","n","toLowerCase","isBlankLine","line","listsToCSV","sep","rows","l","val","join","requirementsToCSV","s","f","cant","must","cats","issuesToCSV","is","unparseCSVSpreadsheet","numCols","y","toString","commasep","blank","EditStudentDialog","useTheme","JSON","parse","stringify","setStudent","errorMessage","setErrorMessage","dummies","setDummies","classIdx","setClassIdx","updateStudent","stud","nameError","Object","entries","value","invalidIdx","updateStudentClassIdx","getStyles","personName","fontWeight","typography","fontWeightRegular","fontWeightMedium","DummyField","prop","printName","Fragment","InputLabel","Select","labelId","multiple","evt","input","Input","fullWidth","dummyMarkup","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","native","FormControl","FormLabel","FormGroup","on","FormControlLabel","control","Checkbox","checked","possible_idx","splice","DialogActions","ViewIssuesDialog","maxWidth","issue","close","downloadFile","filename","data","blob","Blob","elem","document","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","SavedClassesDialog","saves","reverse","Date","time","toLocaleString","restore","App","defaultState","editingStudent","viMod","clMod","version","workerInst","worker","addEventListener","workerFinished","bind","as","localStorage","getItem","autosaved","error","Promise","resolve","reject","reader","FileReader","onload","result","readAsText","files","this","fetch","then","response","status","text","promise","parsed","rawDataString","blanks","blankIdxs","cols","names","substring","parseClassLists","parseCSVSpreadsheet","setState","autosave","catch","console","log","newState","startWorking","stopWorking","runAlgorithm","getTime","unnamed","remove","setItem","prompt","root","fallback","handleFileUpload","dummyFileImport","textDecoration","clear","newClassIdx","restoreOldState","Component","withStyles","justifyContent","alignItems","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","addMethods","methods","module","exports","w","Worker"],"mappings":"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","file":"static/js/main.835f5426.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Box, ButtonGroup, Popper, Grow, MenuItem, MenuList,\n         Paper, ClickAwayListener, makeStyles } from '@material-ui/core';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n\nexport default function Header (props) {\n  const classes = makeStyles(theme => ({\n    header: {\n      position: 'absolute',\n      top: 0, left: 0,\n      width: '100%', height: '50px',\n      backgroundColor: theme.palette.primary.main,\n      color: 'white'\n    },\n    headerLeft: {\n      position: 'absolute',\n      top: 0, left: 0,\n      margin: theme.spacing(1),\n      fontFamily: 'sans-serif',\n      fontSize: '26px'\n    },\n    headerRight: {\n      position: 'absolute',\n      top: 0, right: 0,\n      padding: 6\n    },\n    headerButtonGroup: {\n      marginLeft: theme.spacing(1)\n    }\n  }))();\n\n  const [menuOpen, setMenuOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const handleClose = event => {\n    if (!anchorRef.current || !anchorRef.current.contains(event.target))\n      setMenuOpen(!menuOpen);\n  }\n\n  return (\n<Box className={classes.header}>\n  <Box className={classes.headerLeft}>\n    Class Lists Generator App\n  </Box>\n  {!props.showOptions && (\n    <a href='https://oliverbalfour.github.io/ClassListsGenerator/docs/instructions.html'\n      style={{color:\"white\", fontSize:\"20px\", float: \"right\", fontFamily: \"sans-serif\", margin: \"14px\"}}\n      target=\"_blank\" rel=\"noopener noreferrer\"\n    >Instructions</a>\n  )}\n  { props.showOptions &&\n  <Box className={classes.headerRight}>\n    <Button\n      onClick={props.viewIssues}\n      color='default' variant='contained' style={{marginRight: \"10px\"}}\n    >\n      View issues ({props.issues.length})\n    </Button>\n    {props.state !== 'editing' &&\n      <Button\n        onClick={props.restart}\n        color='default' variant='contained' style={{marginRight: \"10px\"}}\n      >\n        Restart\n      </Button>\n    }\n    {props.state !== 'editing' &&\n      <Button\n        onClick={() => props.toggleState('working')}\n        color='default' variant='contained'\n      >\n        {props.state === 'working' ? 'Stop' : 'Start'}\n      </Button>\n    }\n    <ButtonGroup\n      variant='contained' color='default'\n      className={classes.headerButtonGroup}\n      ref={anchorRef}\n    >\n      <Button onClick={() => props.toggleState('editing')}>\n        {props.state === 'editing' ? 'Done Editing' : 'Edit'}\n      </Button>\n      {props.state !== 'editing' &&\n        <Button onClick={props.undo}>Undo</Button>\n      }\n      {props.state !== 'editing' &&\n        <Button onClick={props.save}>Save</Button>\n      }\n      {props.state !== 'editing' &&\n        <Button size=\"small\" onClick={() => setMenuOpen(!menuOpen)}>\n          <MoreHorizIcon />\n        </Button>\n      }\n    </ButtonGroup>\n    <Popper open={menuOpen} anchorEl={anchorRef.current}\n      transition disablePortal>\n      {({ TransitionProps, place }) => (\n        <Grow {...TransitionProps} style={{\n          transformOrigin: place === 'bottom' ? 'center top' : 'center bottom'\n        }}>\n          <Paper>\n            <ClickAwayListener onClickAway={handleClose}>\n              <MenuList id=\"split-button-menu\">\n                <MenuItem component=\"label\">\n                  Import Spreadsheet (CSV)\n                  <input type=\"file\" style={{ display: \"none\" }}\n                    onChange={e => {setMenuOpen(false); props.importCSV(e)}}/>\n                </MenuItem>\n                <MenuItem onClick={()=>{setMenuOpen(false); props.exportCSV()}}>\n                  Export Spreadsheet (CSV)\n                </MenuItem>\n                <MenuItem onClick={()=>{\n                  setMenuOpen(false); props.openListManager()\n                }}>\n                  See Saved Class Lists\n                </MenuItem>\n                <MenuItem onClick={props.reset}>\n                  Clear saved data\n                </MenuItem>\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Grow>\n      )}\n    </Popper>\n  </Box>\n  }\n</Box>\n  );\n}\n","import React from 'react';\nimport {\n  Paper, makeStyles,\n  Table, TableBody, TableCell, TableHead, TableContainer, TableRow,\n  Chip\n} from '@material-ui/core';\nimport CreateIcon from '@material-ui/icons/Create';\n\nexport default function Column (props) {\n  const classes = makeStyles(theme => ({\n    paper: {\n      padding: theme.spacing(2),\n      marginTop: '58px', marginRight: theme.spacing(1),\n      fontFamily: 'sans-serif',\n      width: '320px'\n    },\n    listName: {\n      fontSize: '20px',\n      display: 'block',\n      marginBottom: '10px'\n    },\n    className: {\n      margin: 0,\n      fontFamily: 'sans-serif',\n      fontSize: '20px'\n    },\n    pencil: {\n      float: 'right',\n      cursor: 'pointer'\n    }\n  }))();\n\n  // Jagged array of category indices for each student\n  const relevantCategories = props.list.map(student_idx =>\n    props.students[student_idx].categories.map(\n      // category is enabled, and not the first dummy category\n      (cat, i) => cat && i !== 0 ? i : -1\n      // filter out disabled categories\n    ).filter(cat => cat >= 0)\n  );\n\n  return (\n<TableContainer component={Paper} className={classes.paper}>\n  <Table size='small'>\n    <TableHead>\n      <TableRow><TableCell>\n        <h1 className={classes.className}>{props.name}</h1>\n      </TableCell></TableRow>\n    </TableHead>\n    <TableBody>\n      {props.list.map(idx => props.students[idx].name).map((name, idx) => (\n        <TableRow key={idx}>\n          <TableCell>\n            {name} &nbsp;&nbsp;\n            {relevantCategories[idx].map(cat => (\n              <span key={cat}>\n                <Chip label={props.categories[cat]} size='small' />&nbsp;\n              </span>\n            ))}\n            {props.state !== 'editing' ? null : (\n              <CreateIcon fontSize='small' className={classes.pencil}\n                onClick={() => props.editStudent(props.list[idx])} />\n            )}\n          </TableCell>\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n</TableContainer>\n  );\n}\n","import React from 'react';\nimport { Box, makeStyles } from '@material-ui/core';\nimport Column from './column.js'\n\nexport default function ColumnList (props) {\n  /**\n   * props.teachers :: [name :: String]\n   * props.students :: [{\n     name :: String, categories :: [Bool], friends :: [student index]\n     mustBeWith :: [student index], cannotBeWith :: [student index],\n     possibleTeachers :: [index into teachers]\n   }]\n   * props.categories :: [String]\n   * props.lists :: [[index into students]] where subarrays are teacher indexed\n   */\n  const classes = makeStyles(theme => ({\n    body: {\n      position: 'absolute',\n      top: 0, left: 0,\n      width: '100%', height: '100%',\n      backgroundColor: '#EEE',\n      margin: 0,\n      display: 'flex'\n    },\n    columnContainer: {\n      position: 'relative',\n      width: '100%',\n      top: 0, bottom: 0,\n      padding: theme.spacing(2),\n      overflowX: 'scroll',\n      whiteSpace: 'nowrap'\n    },\n    columnBox: {\n      position: 'relative',\n      width: '360px',\n      display: 'inline-block',\n      margin: theme.spacing(1),\n      marginTop: 0\n    }\n  }))();\n\n  return (\n<Box className={classes.body}>\n  <Box className={classes.columnContainer}>\n    {props.teachers.map((name, index) => (\n      <Box className={classes.columnBox} key={index}>\n        <Column name={name} list={props.lists[index]}\n          students={props.students} categories={props.categories}\n          state={props.state} editStudent={props.editStudent} />\n      </Box>\n    ))}\n  </Box>\n</Box>\n  );\n}\n","\n// Lists is a jagged array of student indices\n// Class size is [min, max]\n// Students is an array of student objects such that:\n//  friends::[Int] - at least one should be in same class\n//  categories::[Bool] - each boolean category should be roughly evenly distributed\n//  mustBeWith::[Int], cannotBeWith::[Int]\n//  possibleTeachers::[Int]\nexport function iterate (state) {\n  let { lists, students, classSize } = state;\n  // Use a weird mix of hill climbing and simulated annealing optimisation algorithms\n  // Initially we choose the first five moves that reduce cost of up to 100 moves\n  // By the end we string multiple moves together (up to 10 consecutively)\n  // And they can increase cost with a low probability\n  let maxAttemptedChanges = 1000,\n      maxPermutationSteps = 3,\n      currentCost = cost(state);\n  for (let i = 0; i < maxAttemptedChanges; i++) {\n    // if we are 'behind schedule' (not on track to reach c == maxChanges)\n    // then we increase the number of permutation steps\n    // and increase P(accept worse solution)\n    // Generate a new permutation\n    let perm = copy(lists);\n    let schedule = i / maxAttemptedChanges;\n    for (let j = 0; j < Math.ceil(schedule * maxPermutationSteps); j++)\n      perm = generatePermutation(perm, students, classSize);\n    // Update the lists\n    let newCost = cost({...state, lists: perm});\n    if (newCost < cost({...state, lists})) {\n      lists = perm;\n      currentCost = newCost;\n    }\n  }\n  return { lists, issues: determineIssues({...state, lists}), cost: currentCost };\n}\n\nfunction generatePermutation(lists, students, classSize) {\n  lists = copy(lists);\n  // Most perms swap students, it's cleaner and there are more possible moves\n  if (rand(0,2) < 1) {\n    // swap two students (class size remains the same)\n    let a = rand(0, students.length),\n        b = rand(0, students.length - 1);\n    if (b === a) b = students.length - 1;\n    let asrc = searchClasses(lists, a),\n        bsrc = searchClasses(lists, b);\n    lists[asrc][lists[asrc].indexOf(a)] = b;\n    lists[bsrc][lists[bsrc].indexOf(b)] = a;\n  } else {\n    // move one student to another class\n    let a = rand(0, students.length),\n        dst = rand(0, lists.length - 1),\n        src = searchClasses(lists, a);\n    if (dst === src) dst = lists.length - 1;\n    lists[src].splice(lists[src].indexOf(a), 1);\n    lists[dst].push(a);\n  }\n\n  // Test that no student is duplicated\n  var studs = {};\n  for (let list of lists)\n    for (let student of list)\n      if (studs[student]) console.error(\"Duplicated student\");\n      else studs[student] = true;\n\n  return lists;\n}\n\n// random integer in interval [min, max)\nconst rand = (min, max) => Math.floor(Math.random() * (max - min) + min);\n// Deep copy primitive object/array\nconst copy = obj => JSON.parse(JSON.stringify(obj));\n\n// Sum severities of the issues list\nfunction cost (state) {\n  return determineIssues(state)\n    .map(x => x.severity)\n    .reduce((a,b)=>a+b,0);\n}\n\n// Search a class list for student index x (-1 if not found)\nconst searchClasses = (lists, x) =>\n  lists.map(list => list.indexOf(x) !== -1).indexOf(true);\n\n// Creates a list of issues with a list state for 1) display in a modal\n// and 2) optimisation in `iterate`: minimises \\sum_{k\\in issues} k_{severity}\nexport function determineIssues (state) {\n  let { lists, students, classSize, categories, teacherNames } = state;\n  var issues = [];\n  for (let j = 0; j < lists.length; j++) {\n    const list = lists[j];\n    for (let i = 0; i < list.length; i++) {\n      const student = students[list[i]];\n      // Must/cannot be with\n      for (const idx of student.mustBeWith) {\n        if (list.indexOf(idx) === -1)\n          issues.push({severity: 3, message: `${student.name} must be with ${students[idx].name}.`});\n      }\n      for (const idx of student.cannotBeWith) {\n        if (list.indexOf(idx) !== -1)\n          issues.push({severity: 5, message: `${student.name} cannot be with ${students[idx].name}.`});\n      }\n      // Friends\n      let numFriends = 0;\n      for (const idx of student.friends) {\n        if (list.indexOf(idx) !== -1) numFriends ++;\n      }\n      if (numFriends < 1 && student.friends.length > 0)\n        issues.push({severity: 3, message: `${student.name} is not with any friends.`});\n      // Possible teacherNames\n      if (student.possibleTeachers.indexOf(j) === -1)\n        issues.push({severity: 5, message: `${student.name} must not be in ${teacherNames[j]}'s class.`});\n    }\n    // Class size\n    if (list.length < classSize[0]) {\n      const severity = classSize[0] - list.length;\n      issues.push({\n        severity: 8 * severity,\n        message: `${teacherNames[j]}'s class has ${severity} too few students.`\n      });\n    } else if (list.length > classSize[1]) {\n      const severity = list.length - classSize[1];\n      issues.push({\n        severity: 10 * severity,\n        message: `${teacherNames[j]}'s class has ${severity} too many students.`\n      });\n    }\n  }\n  // Categories\n  // catMat[categoryIdx][classIdx] is num people with that cat in that class\n  const catMat = categories.map((_, i) => lists.map(\n    // count number of students in list with category i enabled\n    list => list.map(studentIdx => students[studentIdx].categories[i]).reduce((a,b)=>a+b,0)\n  ));\n  for (let i = 0; i < categories.length; i++) {\n    const diff = Math.max(...catMat[i]) - Math.min(...catMat[i]);\n    if ((diff > 1 && i !== 0) || (diff > 3 && i === 0)) { // gender imbalance is less important\n      issues.push({\n        severity: diff,\n        message: `Imbalanced ${categories[i]} category: ${catMat[i]} students per class respectively.`\n      });\n    }\n  }\n\n  return issues;\n}\n\nexport function generateRandomList (studentNames, numClasses) {\n  const shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n  var listIndices = shuffle(studentNames.map((_,i)=>i));\n  var lists = [];\n  var lastIndex = 0;\n  let k = Math.ceil(studentNames.length/numClasses);\n  for (let i = 0; i < numClasses; i++) {\n    lists.push(listIndices.slice(lastIndex, lastIndex + k));\n    lastIndex += k;\n  }\n  return lists;\n}\n","\nimport {generateRandomList,determineIssues} from './algorithm.js';\n\nconst safeSplitComma = string => {\n  // we can have commas in strings delimited by \"these quotes\"\n  // this works around that\n  var inString = false;\n  var items = [];\n  var currentItem = '';\n  for (let c of string) {\n    if (c === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString || c !== ',') {\n      currentItem += c;\n    } else {\n      items.push(currentItem.trim());\n      currentItem = '';\n    }\n  }\n  items.push(currentItem.trim());\n  return items;\n}\n\nexport function parseCSVSpreadsheet (rawDataString) {\n  var lines = rawDataString.split(/[\\r\\n]+/); // split by all 3 line endings\n  while (lines.indexOf(\"\") !== -1) lines.splice(lines.indexOf(\"\"), 1);\n  var data;\n\n  if (lines[0][0] === ',') {\n    // requirements only\n    data = parseRequirements(lines);\n    data.lists = generateRandomList(data.studentNames, data.numClasses);\n  } else {\n    // exported sheet (lists, two blank lines, requirements, two blank lines, issues)\n    let blanks = 0, blankIdxs = [];\n    for (let i = 0; i < lines.length; i++) {\n      if (isBlankLine(lines[i])) blanks++;\n      else blanks = 0;\n      if (blanks === 2) {\n        blanks = 0;\n        blankIdxs.push(i);\n      }\n    }\n    // 0 to blankIdxs[0]-1 exclusive is class list\n    // blankIdxs[0]+1 to blankIdxs[1]-1 exclusive is requirements list\n    data = parseRequirements(lines.slice(blankIdxs[0]+1, blankIdxs[1]-1));\n    data.lists = parseClassLists(data, lines.slice(0, blankIdxs[0]-1));\n  }\n\n  data.issues = determineIssues(data);\n\n  return data;\n}\n\nfunction parseClassLists (state, lines) {\n  const cols = state.teacherNames.length;\n  const extractCols = line => line.split(',').slice(0,cols).map(x=>x.substring(1,x.length-1));\n  const lists = state.teacherNames.map(x=>[]);\n  const idxFromName = name => state.studentNames.indexOf(name);\n  for (let i = 1; i < lines.length; i ++) {\n    const names = extractCols(lines[i]);\n    for (let j = 0; j < cols; j++) {\n      lists[j].push(idxFromName(names[j]));\n    }\n  }\n  return lists;\n}\n\nfunction parseRequirements (lines) {\n  var numClasses = parseInt(lines[1].split(\",\")[5]);\n  var minStudents = parseInt(lines[1].split(\",\")[1]);\n  var maxStudents = parseInt(lines[1].split(\",\")[2]);\n\n  var teacherNames = safeSplitComma(lines[1])[8].split(',').map(x=>x.trim());\n  var categories = [\"Female\", ...safeSplitComma(lines[4]).slice(11)];\n\n  var students = [];\n  var studentNames = lines.slice(5).map(safeSplitComma).map(x=>x[1]);\n  for (let i = 5; i < lines.length; i++) {\n    var row = safeSplitComma(lines[i]).slice(1);\n    students.push({\n      classID: safeSplitComma(lines[i])[0],\n      name: row[0],\n      categories: [row[1] === \"F\",\n        ...row.slice(10).map(x => x.length > 0)], // list of bools\n      friends: row.slice(2,7).map(name=>studentNames.indexOf(name))\n                .filter(x=>x>=0),\n      mustBeWith: row[8].length === 0 ? []\n        : safeSplitComma(row[8]).map(name=>studentNames.indexOf(name))\n          .filter(x=>x>=0),\n      cannotBeWith: row[7].length === 0 ? []\n        : safeSplitComma(row[7]).map(n=>studentNames.indexOf(n))\n          .filter(x=>x>=0),\n      // indices of teacher names within teacherNames\n      // if ALL, add all indices [0,1,...,numClasses]\n      possibleTeachers: (row[9].toLowerCase() === \"all\"\n                      || row[9].toLowerCase() === \"any\" || row[9] === \"\")\n        ? teacherNames.map((_,i) => i)\n        : safeSplitComma(row[9]).map(name => teacherNames.indexOf(name))\n          .filter(x=>x>=0)\n    });\n  }\n\n  return {\n    numClasses, // teacherNames.length\n    classSize: [minStudents, maxStudents],\n    teacherNames,\n    categories,\n    students,\n    studentNames\n  }\n}\n\nconst isBlankLine = line => line.split('').filter(c => c !== ',').length === 0;\n\nconst commasep = numCols => list => {\n  let s = list.map(x => {\n    const y = x.toString();\n    return (y.indexOf(',') === -1 || (y[0] === '\"' && y[y.length-1]==='\"')) ? y : `\"${y}\"`;\n  }).join(',');\n  for (let i = 0; i < numCols - list.length; i++)\n    s += ',';\n  return s;\n}\n\nfunction listsToCSV (state,sep) {\n  // first we format the data as a matrix of values\n  let rows = [state.teacherNames];\n  for (let i = 0; i < Math.max(...state.lists.map(l=>l.length)); i++) {\n    const row = [];\n    for (let j = 0; j < state.lists.length; j++) {\n      if (i < state.lists[j].length)\n        row.push(state.students[state.lists[j][i]].name);\n      else row.push(\"\");\n    }\n    // add quotes to escape commas in names in case they pop up\n    rows.push(row.map(val => `\"${val}\"`));\n  }\n  // next we turn it to CSV\n  let string = rows.map(sep).join(\"\\n\");\n  return string;\n}\n\nfunction requirementsToCSV (state,sep) {\n  let lines = [];\n  lines.push(sep(['','Min','Max']));\n  lines.push(sep(['Students per class',state.classSize[0],state.classSize[1],'','No. classes',state.teacherNames.length,'','Teachers',state.teacherNames]));\n  lines.push(sep([]));\n  lines.push(sep(['Required','Optional','','','','','','','','Custom categories']));\n  lines.push(sep(['Class code','Name','Gender','Friend 1','Friend 2','Friend 3','Friend 4','Friend 5',\"Can't be with\",'Must be with','Possible teachers',...state.categories]));\n  for (let i = 0; i < state.students.length; i++) {\n    var s = state.students[i];\n    var f = n => state.students[n].name;\n    var friends = s.friends.map(f);\n    while (friends.length < 5) friends.push(\"\");\n    var cant = s.cannotBeWith.map(f).join(', ');\n    var must = s.mustBeWith.map(f).join(', ');\n    var teachers = s.possibleTeachers.length === state.teacherNames.length ? \"ALL\" : s.possibleTeachers.map(n=>state.teacherNames[n]).join(', ');\n    var cats = s.categories.slice(1).map(b => b ? \"YES\" : \"\");\n    lines.push(sep([s.classID,s.name,s.categories[0]?'F':'M',...friends,cant,must,teachers,...cats]));\n  }\n  return lines.join('\\n');\n}\n\nfunction issuesToCSV (state,sep) {\n  return sep([\"Issues:\"]) + '\\n' + state.issues.map(is => sep([is.message])).join('\\n');\n}\n\nexport function unparseCSVSpreadsheet (state) {\n  const numCols = Math.max(state.teacherNames.length + 8, state.categories.length + 10);\n  const sep = commasep(numCols);\n  const blank = '\\n'+sep([]);\n  return [listsToCSV(state,sep), requirementsToCSV(state,sep), issuesToCSV(state,sep)].join(blank+blank+'\\n');\n}\n","import React from 'react';\nimport {unparseCSVSpreadsheet} from '../tools/parser.js';\nimport {\n  TextField, Dialog, DialogActions, DialogContent, DialogContentText,\n  DialogTitle, Button, FormLabel, FormControl, FormGroup, FormControlLabel,\n  Checkbox, Table, TableBody, TableRow, TableCell, Select, Input, MenuItem,\n  useTheme, InputLabel\n} from '@material-ui/core';\n\nexport function EditStudentDialog (props) {\n  const studentNames = props.students.map(x=>x.name);\n  const theme = useTheme();\n  /**\n   * props.student_idx :: Int\n   * props.updateStudent :: Student -> void\n   * props.teachers :: [name :: String]\n   * props.students :: [{\n       name :: String, categories :: [Bool], friends :: [student index]\n       mustBeWith :: [student index], cannotBeWith :: [student index],\n       possibleTeachers :: [index into teachers]\n     }]\n   * props.categories :: [String]\n   */\n\n  var [student, setStudent] = React.useState(\n    JSON.parse(JSON.stringify(props.students[props.student_idx]))\n  );\n  var [errorMessage, setErrorMessage] = React.useState(\"\");\n\n  // Note: trims whitespace too\n  const handleChange = key => evt => setStudent({\n    ...student, [key]: evt.target.value.trim()\n  });\n\n  // Use dummy representations of lists of names as checkboxes are a poor choice\n  // for this use case and a dynamic list is a lot of work\n  // TODO: use <Select multiple /> instead https://material-ui.com/components/selects/#multiple-select\n\n  // handle change to 'name 1, name 2, ...' represented as list of\n  // indices into props.students\n  var [dummies, setDummies] = React.useState({\n    friends: student.friends.map(id => studentNames[id]),\n    mustBeWith: student.mustBeWith.map(id => studentNames[id]),\n    cannotBeWith: student.cannotBeWith.map(id => studentNames[id])\n  });\n  const handleDummyChange = key => evt => setDummies({\n    ...dummies, [key]: evt.target.value\n  });\n  let [classIdx, setClassIdx] = React.useState(props.classIdx);\n  const updateStudent = student => {\n    // Rebase dummy values onto student by parsing CSV strings\n    var stud = {};\n    var nameError = false;\n    for (const [key, value] of Object.entries(dummies)) {\n      if (!value.length) stud[key] = [];\n      else stud[key] = value.map(x=>studentNames.indexOf(x));\n      var invalidIdx = stud[key].indexOf(-1);\n      if (invalidIdx !== -1) nameError = value[invalidIdx];\n    }\n\n    // Validation\n    if (student.possibleTeachers.length === 0) {\n      setErrorMessage(\"Cannot have zero possible teachers.\");\n    } else if (nameError !== false) {\n      setErrorMessage(\"Invalid name: '\"+nameError+\"'. Make sure spelling is exact.\");\n    } else {\n      for (const [key, value] of Object.entries(stud)) {\n        student[key] = value;\n      }\n      setStudent(student);\n      if (classIdx !== props.classIdx && student !== props.students[props.student_idx])\n        props.updateStudentClassIdx(classIdx);\n      props.updateStudent(student);\n    }\n  }\n  function getStyles(name, personName, theme) {\n    return {\n      fontWeight:\n        personName.indexOf(name) === -1\n          ? theme.typography.fontWeightRegular\n          : theme.typography.fontWeightMedium,\n    };\n  }\n  const DummyField = ({prop, printName}) => (\n    <React.Fragment>\n      <br/>\n      <InputLabel id={prop+\"-label\"}>{printName}</InputLabel>\n      <Select\n        labelId={prop+\"-label\"}\n        multiple\n        value={dummies[prop]}\n        onChange={handleDummyChange(prop)}\n        input={<Input />}\n        fullWidth>\n        {studentNames.map(name => (\n          <MenuItem key={name} value={name} style={getStyles(name, dummies[prop], theme)}>\n            {name}\n          </MenuItem>\n        ))}\n      </Select>\n    </React.Fragment>\n  );\n  var dummyMarkup = (\n    <React.Fragment>\n      <br/><DummyField prop=\"friends\" printName=\"Friends\" />\n      <br/><DummyField prop=\"mustBeWith\" printName=\"Must Be With\" />\n      <br/><DummyField prop=\"cannotBeWith\" printName=\"Cannot Be With\" />\n    </React.Fragment>\n  );\n\n  return (\n <Dialog open={true} onClose={()=>{}} aria-labelledby=\"form-dialog-title\">\n  <DialogTitle id=\"form-dialog-title\">Editing {student.name}</DialogTitle>\n  <DialogContent>\n    <DialogContentText>\n      To force a class change after lists are generated, you must edit a\n      student's parameters.&nbsp;\n      {errorMessage.length === 0 ? null : (\n        <span style={{color:'red'}}>Error: {errorMessage}</span>\n      )}\n    </DialogContentText>\n    <TextField\n      label=\"Name\"\n      variant=\"filled\"\n      value={student.name}\n      onChange={handleChange(\"name\")}\n      fullWidth />\n    <InputLabel style={{marginTop:10}} id=\"teacher-label\">Current Teacher</InputLabel>\n    <Select\n      labelId=\"teacher-label\"\n      native\n      value={props.teachers[classIdx]}\n      onChange={evt => setClassIdx(props.teachers.indexOf(evt.target.value))}\n      fullWidth\n    >\n      {props.teachers.map((name, idx) =>\n        <option value={name} key={idx}>{name}</option>\n      )}\n    </Select>\n    {dummyMarkup}\n    <FormControl component=\"fieldset\" style={{marginTop:\"20px\"}}>\n      <FormLabel component=\"legend\">Categories</FormLabel>\n      <FormGroup>\n        {student.categories.map((on, idx) => (\n          <FormControlLabel\n            control={\n              <Checkbox checked={on} onChange={() => {\n                student.categories[idx] = !student.categories[idx];\n                setStudent({...student});\n              }} />\n            }\n            label={props.categories[idx]} key={idx}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n    <FormControl component=\"fieldset\" style={{marginTop:\"20px\"}}>\n      <FormLabel component=\"legend\">Possible teachers</FormLabel>\n      <FormGroup>\n        {props.teachers.map((name, idx) => (\n          <FormControlLabel\n            control={\n              <Checkbox checked={student.possibleTeachers.indexOf(idx) !== -1}\n                onChange={() => {\n                  const possible_idx = student.possibleTeachers.indexOf(idx);\n                  if (possible_idx === -1) student.possibleTeachers.push(idx);\n                  else student.possibleTeachers.splice(possible_idx, 1);\n                  setStudent({...student});\n                }}\n              />\n            }\n            label={name} key={idx}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"primary\" onClick={\n      () => updateStudent(props.students[props.student_idx])\n    }>\n      Cancel\n    </Button>\n    <Button onClick={() => updateStudent(student)}\n      color=\"primary\">\n      Update\n    </Button>\n  </DialogActions>\n</Dialog>\n  );\n}\n\nexport function ViewIssuesDialog (props) {\n  return (\n <Dialog open={true} onClose={()=>{}} aria-labelledby=\"form-dialog-title\"\n    fullWidth={true} maxWidth=\"md\">\n  <DialogTitle id=\"form-dialog-title\">Issues with current class list</DialogTitle>\n  <DialogContent>\n    <Table size='small'>\n      <TableBody>\n        {props.issues.map((issue, idx) => (\n          <TableRow key={idx}>\n            <TableCell>\n              {issue.message}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"primary\" onClick={props.close}>\n      Close\n    </Button>\n  </DialogActions>\n</Dialog>\n  );\n}\n\nexport function downloadFile (filename, data) {\n  let blob = new Blob([data], {type: 'text/csv'}),\n      elem = document.createElement('a');\n  elem.href = window.URL.createObjectURL(blob);\n  elem.download = filename;\n  document.body.appendChild(elem);\n  elem.click();\n  document.body.removeChild(elem);\n}\n\nexport function SavedClassesDialog (props) {\n  const exportCSV = i => {\n    const string = unparseCSVSpreadsheet(props.saves[i].data);\n    const time = new Date(props.saves[i].time).toLocaleString();\n    downloadFile(\"class_lists_\"+props.saves[i].name+\"_\"+time+\".csv\", string);\n  }\n  return (\n <Dialog open={true} onClose={()=>{}} aria-labelledby=\"form-dialog-title\"\n    fullWidth={true} maxWidth=\"md\">\n  <DialogTitle id=\"form-dialog-title\">Saved class lists</DialogTitle>\n  <DialogContent>\n    <Table size='small'>\n      <TableBody>\n        {/* we want them in reverse order, so newest is at the top */}\n        {props.saves.slice(0).reverse().map((save, idx) => (\n          <TableRow key={idx}>\n            <TableCell>\n              <strong>{save.name}</strong>\n            </TableCell>\n            <TableCell>\n              {new Date(save.time).toLocaleString()}\n            </TableCell>\n            <TableCell>\n              <Button color='secondary' variant='contained' onClick={()=>exportCSV(props.saves.length-1-idx)}>\n                Export CSV\n              </Button>\n            </TableCell>\n            <TableCell>\n              <Button color='secondary' variant='contained' onClick={()=>props.restore(save)}>\n                Restore\n              </Button>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"primary\" onClick={props.close}>\n      Close\n    </Button>\n  </DialogActions>\n</Dialog>\n  );\n}\n","import React from 'react';\nimport { Box, Button, withStyles } from '@material-ui/core';\nimport Header from './components/header.js';\nimport ColumnList from './components/columnlist.js';\nimport { EditStudentDialog, ViewIssuesDialog, SavedClassesDialog, downloadFile } from './components/dialogs.js';\nimport { determineIssues, generateRandomList } from './tools/algorithm.js';\nimport worker from 'workerize-loader!./worker'; // eslint-disable-line import/no-webpack-loader-syntax\nimport { parseCSVSpreadsheet, unparseCSVSpreadsheet } from './tools/parser.js';\n\nconst styles = theme => ({\n  root: {\n    position: 'absolute',\n    top: 0, left: 0,\n    width: '100%', height: '100%',\n    backgroundColor: \"#EEE\",\n  },\n  fallback: {\n    position: 'absolute',\n    top: 0, left: 0,\n    width: '100%', height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontFamily: 'sans-serif',\n    fontSize: '30px'\n  }\n});\n\nclass App extends React.Component {\n  constructor () {\n    super();\n    this.defaultState = {\n      teacherNames: [],\n      lists: [],\n      /* either view, working or editing */\n      state: 'view',\n      // if positive, modal is open with that index student's config\n      editingStudent: -1,\n      issues: [],\n      viMod: false, clMod: false, // view issues modal open\n      saves: [],\n      version: 1, // if version of autosaved state is different, it does not load\n    };\n    this.state = JSON.parse(JSON.stringify(this.defaultState));\n    this.workerInst = worker();\n    this.workerInst.addEventListener('message', this.workerFinished.bind(this));\n    // Reload autosaved state\n    try {\n    const as = localStorage.getItem('saves');\n      if (as !== null) {\n        const autosaved = JSON.parse(as);\n        if (autosaved[0].data.version === this.state.version) {\n          this.state = JSON.parse(JSON.stringify(autosaved[autosaved.length - 1].data));\n          this.state.saves = autosaved;\n          this.state.state = 'view';\n          this.state.viMod = this.state.clMod = false;\n          this.state.editingStudent = -1;\n        }\n      }\n    } catch (error) {}\n  }\n  handleFileUpload (evt) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => resolve(e.target.result);\n      reader.readAsText(evt.target.files[0]);\n    });\n  }\n  exportCSV (e) {\n    const string = unparseCSVSpreadsheet(this.state);\n    downloadFile(\"class_lists.csv\", string);\n  }\n  dummyFileImport () {\n    return new Promise((resolve, reject) =>\n      fetch('./dummy.csv')\n        .then(response => {\n          if (response.status !== 200) reject(response.status);\n          else response.text().then(resolve);\n        })\n    );\n  }\n  importCSV (promise) {\n    promise.then(data => {\n      // This adds numClasses, classSize, teacherNames, categories,\n      //   students, studentNames, issues and lists to the state\n      const parsed = parseCSVSpreadsheet(data);\n      this.setState(parsed, this.autosave);\n    }).catch(console.log);\n  }\n  toggleState (newState) {\n    if (newState === \"working\" && this.state.state !== \"working\")\n      this.startWorking();\n    else this.stopWorking();\n\n    if (this.state.state !== newState)\n      this.setState({ state: newState });\n    else\n      this.setState({ state: 'import' });\n  }\n  startWorking () {\n    this.workerInst.runAlgorithm(this.state);\n  }\n  stopWorking () {\n    this.setState({ state: 'view' });\n  }\n  workerFinished (message) {\n    if (this.state.state === 'working') {\n      // This is where the class lists are updated\n      this.setState({...message.data, state: 'view'}, this.autosave);\n    }\n  }\n  restart () {\n    this.stopWorking();\n    const { studentNames, numClasses } = this.state;\n    const lists = generateRandomList(studentNames, numClasses);\n    const issues = determineIssues({...this.state, lists});\n    this.setState({ lists, issues, state: \"view\" }, this.autosave);\n  }\n  editStudent (student_idx) {\n    // open modal to edit student information\n    this.setState({editingStudent: student_idx});\n  }\n  autosave () {\n    // add the current state to the this.state.saves list\n    let { saves, lists, students, classSize, categories, teacherNames,\n      issues, numClasses, studentNames, version } = this.state;\n    saves.push({\n      name: \"\",\n      time: new Date().getTime(),\n      data: { lists, students, classSize, categories, teacherNames,\n        issues, numClasses, studentNames, version }\n    });\n    // allow only the most recent 10 unnamed saves; named ones are preserved\n    let unnamed = [];\n    for (let i = 0; i < saves.length; i++) {\n      if (saves[i].name === '') {\n        unnamed.push(i);\n      }\n    }\n    let remove = unnamed.slice(0, unnamed.length - 10);\n    remove.reverse();\n    for (let i = 0; i < remove.length; i++) {\n      saves.splice(remove[i],1);\n    }\n    this.setState({saves, state: 'view', viMod: false, clMod: false, editingStudent: -1});\n    // We need to be very careful about circular references here\n    localStorage.setItem('saves', JSON.stringify(saves));\n  }\n  undo (n) {\n    // n is amount of steps to undo\n    // note that the saves includes the current state as the end\n    if (typeof n !== \"number\") n = 1;\n    if (n >= this.state.saves.length) n = this.state.saves.length - 1;\n    if (this.state.saves.length-n <= 0) return; //nothing to undo\n\n    let s = this.state.saves,\n        save = s[s.length - n-1].data,\n        saves = s.slice(0, s.length - n);\n    this.setState({\n      ...save, saves,\n      state: 'view', viMod: false, clMod: false, editingStudent: -1\n    });\n    // We need to be very careful about circular references here\n    localStorage.setItem('saves', JSON.stringify(saves));\n  }\n  restoreOldState (save) {\n    // restore this.state.saves[idx]\n    // we keep the saves the same except we repeat the old save at the top\n    // TODO: preserve name on restoration\n    this.setState(save.data, this.autosave);\n  }\n  save () {\n    var name = prompt(\"Please enter the name of the save:\");\n    const s = this.state.saves;\n    s[s.length - 1].name = name;\n    this.setState({saves:s}, () => localStorage.setItem('saves', JSON.stringify(this.state.saves)))\n  }\n  render () {\n    const { classes } = this.props;\n    const classIdx = this.state.lists.map(list => list.indexOf(this.state.editingStudent) !== -1).indexOf(true);\n    return (\n      <Box className={classes.root}>\n        {this.state.teacherNames.length ? (\n          <ColumnList\n            teachers={this.state.teacherNames}\n            students={this.state.students}\n            categories={this.state.categories}\n            lists={this.state.lists}\n            state={this.state.state}\n            editStudent={this.editStudent.bind(this)}\n          />\n        ) : (\n          <Box className={classes.fallback}>\n            Please &nbsp;\n            <Button component=\"label\"\n              size='large' color='primary' variant='contained'>\n              import\n              <input type=\"file\" style={{ display: \"none\" }}\n                onChange={e => this.importCSV(this.handleFileUpload(e))}/>\n            </Button>\n            &nbsp; a spreadsheet&nbsp;\n            <span style={{fontSize: \"1rem\"}}>\n              (or&nbsp;\n              <span onClick={()=>this.importCSV(this.dummyFileImport())}\n                style={{color:\"blue\",textDecoration:\"underline\",cursor:\"pointer\"}}>\n                see a demo\n              </span>\n              )\n            </span>\n          </Box>\n        )}\n        <Header\n          importCSV={e => this.importCSV(this.handleFileUpload(e))}\n          exportCSV={this.exportCSV.bind(this)}\n          openListManager={() => this.setState({ clMod: !this.state.clMod })}\n          toggleState={this.toggleState.bind(this)}\n          save={this.save.bind(this)}\n          undo={this.undo.bind(this)}\n          restart={this.restart.bind(this)}\n          state={this.state.state}\n          showOptions={this.state.teacherNames.length > 0}\n          issues={this.state.issues}\n          viewIssues={() => this.setState({ viMod: !this.state.viMod })}\n          reset={() => {\n            if (window.prompt(\"This action will delete ALL data. Type YES to confirm, or leave blank to cancel.\", \"NO\") === \"YES\") {\n              localStorage.clear();\n              this.setState(this.defaultState);\n            }\n          }}\n        />\n        {this.state.editingStudent < 0 ? null : (\n          <EditStudentDialog student_idx={this.state.editingStudent}\n            teachers={this.state.teacherNames}\n            students={this.state.students}\n            categories={this.state.categories}\n            updateStudent={student => {\n              const students = this.state.students;\n              students[this.state.editingStudent] = student;\n              this.setState({ issues: determineIssues({...this.state, students}), students, editingStudent: -1 }, this.autosave);\n            }}\n            classIdx={classIdx}\n            updateStudentClassIdx={newClassIdx => {\n              this.state.lists[classIdx].splice(this.state.lists[classIdx].indexOf(this.state.editingStudent), 1);\n              this.state.lists[newClassIdx].push(this.state.editingStudent);\n              this.setState({ lists: this.state.lists }, this.autosave);\n            }}\n          />\n        )}\n        {!this.state.viMod ? null : (\n          <ViewIssuesDialog issues={this.state.issues}\n            close={() => this.setState({ viMod: !this.state.viMod })} />\n        )}\n        {!this.state.clMod ? null : (\n          <SavedClassesDialog saves={this.state.saves}\n            close={() => this.setState({ clMod: !this.state.clMod })}\n            restore={this.restoreOldState.bind(this)}\n            />\n        )}\n      </Box>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// Progressive web app stuff (read https://bit.ly/CRA-PWA)\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />\n  // </React.StrictMode>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"runAlgorithm\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"bad786582c6add302e32.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t"],"sourceRoot":""}